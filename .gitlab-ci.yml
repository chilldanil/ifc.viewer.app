# GitLab CI/CD Pipeline for IFC Viewer Project

# Define stages for the pipeline
stages:
  - install
  - quality
  - test
  - build
  - docs
  - deploy

# Global variables
variables:
  NODE_VERSION: "20"
  CACHE_FALLBACK_KEY: "$CI_COMMIT_REF_SLUG"
  # Disable Husky git hooks in CI
  HUSKY: "0"

# Default settings for all jobs
default:
  image: node:${NODE_VERSION}-alpine
  # Caching strategy for faster builds
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/
      - .npm/
    policy: pull

# Templates
.node_template: &node_template
  before_script:
    - npm ci --cache .npm --prefer-offline

# ==================== INSTALL STAGE ====================

install_dependencies:
  stage: install
  <<: *node_template
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/
      - .npm/
    policy: pull-push
  script:
    - echo "Installing dependencies..."
    - npm ci --cache .npm --prefer-offline
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 day
  only:
    - branches
    - tags
    - merge_requests

# ==================== QUALITY STAGE ====================

# Linting
lint:
  stage: quality
  <<: *node_template
  needs:
    - install_dependencies
  script:
    - echo "Running ESLint..."
    - npm run lint
  artifacts:
    reports:
      junit: lint-report.xml
    when: on_failure
    expire_in: 1 week
  allow_failure: false
  only:
    - branches
    - merge_requests

# Code formatting check
format_check:
  stage: quality
  <<: *node_template
  needs:
    - install_dependencies
  script:
    - echo "Checking code formatting with Prettier..."
    - npm run format:check
  allow_failure: false
  only:
    - branches
    - merge_requests

# Code complexity and maintainability
code_quality:
  stage: quality
  <<: *node_template
  needs:
    - install_dependencies
  script:
    - echo "Running ESLint for GitLab Code Quality..."
    # Run ESLint and output JSON report
    - npx eslint src/ --format json -o gl-code-quality-report.json || true
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week
  only:
    - branches
    - merge_requests

# ==================== TEST STAGE ====================

# Unit tests with coverage (change it if we gonna have tests)
#Our work gets pretty complex now it might make sense to add some tests later
#at least for certain branches
# Dummy test stage (no tests yet)
test:
  stage: test
  <<: *node_template
  script:
    - echo "Skipping tests (no tests yet)"
  rules:
    - when: always  # run fast and pass

# ==================== BUILD STAGE ====================

# Build application
#build:
  #stage: build
  #<<: *node_template
  #needs:
    #- install_dependencies
    #- type_check
    #- lint
  #script:
    #- echo "Building application for production..."
    #- npm run build
    #- echo "Build size analysis..."
    #- du -sh dist/
  #artifacts:
    #paths:
      #- dist/
    #expire_in: 1 week
  #only:
    #- branches
    #- tags
    #- merge_requests

# Build only the intro (viewer will be integrated inside)
build_intro:
  stage: build
  <<: *node_template
  # Override default before_script to avoid root npm ci
  before_script: []   # <-- prevent duplicate npm install in repo root
  needs:
    - install_dependencies
    - lint
  script:
    - echo "Building intro (with embedded viewer)..."
    # Install intro deps only
    - npm ci --cache .npm --prefer-offline --prefix intro
    - npm run build --prefix intro
  artifacts:
    paths:
      - intro/build/
    expire_in: 7 days
  rules:
    # Run build only when intro or viewer sources are changed
    - changes:
        - intro/**/*
        - src/**/*
        - viewer/**/*
        - package.json
        - package-lock.json
      when: on_success
    - when: never

# ==================== DOCS STAGE ====================

# Generate API docs for viewer (used later when viewer becomes a package)
generate_viewer_docs:
  stage: docs
  <<: *node_template
  # Avoid root install; install only inside viewer
  before_script: []
  script:
    - echo "Generating TypeDoc for viewer..."
    - cd viewer
    - npm ci --prefer-offline
    - npm run docs:generate
  artifacts:
    paths:
      - viewer/docs/
    expire_in: 30 days
  rules:
    - changes:
        - viewer/**/*
      when: on_success
    - when: never

# ==================== DEPLOY STAGE ====================

# Deploy to GitLab Pages
pages:
  stage: deploy
  needs:
    - build_intro          
  script:
    - echo "Preparing GitLab Pages artifact..."
    - mkdir -p public
    # main demo (intro)
    - cp -r intro/build/* public/
    # optional: viewer API docs, if generated someday
    - if [ -d viewer/docs ]; then mkdir -p public/docs && cp -r viewer/docs/* public/docs/; else echo "No viewer docs to publish"; fi
    # optional, but useful
    - echo "User-agent: *" > public/robots.txt
    - echo "Allow: /" >> public/robots.txt
    - touch public/.nojekyll   # to prevent Pages from breaking paths with underscores
    - echo "Pages structure:" && ls -la public/
  artifacts:
    paths:
      - public
  rules:
    # deploy only from needed branches
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "development"'
      when: on_success
    - when: never

